#pragma checksum "C:\Users\gabi_\OneDrive\Documentos\PORTAL\PortalServiciosMC\ServiciosMC\Views\Principal\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "38759ea4693b8b520a1b873294b148c73ea56ab4"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Principal_Index), @"mvc.1.0.view", @"/Views/Principal/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\gabi_\OneDrive\Documentos\PORTAL\PortalServiciosMC\ServiciosMC\Views\_ViewImports.cshtml"
using ServiciosMC;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\gabi_\OneDrive\Documentos\PORTAL\PortalServiciosMC\ServiciosMC\Views\_ViewImports.cshtml"
using ServiciosMC.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"38759ea4693b8b520a1b873294b148c73ea56ab4", @"/Views/Principal/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"57c72fc012a2d3bda8492b1b12857bb8d70486cb", @"/Views/_ViewImports.cshtml")]
    public class Views_Principal_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/plugins/jquery/jquery.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/estilosHome.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("buscarTicketForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("onsubmit", new global::Microsoft.AspNetCore.Html.HtmlString("buscarTicket(); return false;"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("w-100"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n<html lang=\"es\">\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "38759ea4693b8b520a1b873294b148c73ea56ab45913", async() => {
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "38759ea4693b8b520a1b873294b148c73ea56ab46175", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    <link href=\"https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined\" rel=\"stylesheet\" />\r\n    <link href=\"https://fonts.googleapis.com/css2?family=Urbanist:ital,wght@0,100..900;1,100..900&display=swap\" rel=\"stylesheet\">\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "38759ea4693b8b520a1b873294b148c73ea56ab47522", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "38759ea4693b8b520a1b873294b148c73ea56ab49405", async() => {
                WriteLiteral(@"
    <div class=""row justify-content-center"">
        <div class=""col-sm-12 col-lg-10 col-md-10"">
            <div class=""row h-100"">
                <div class=""col-sm-4 col-md-6 col-lg-5 flex-grow-1"">
                    <!--DIV IZQUIERDA-->
                    
                    <div class=""card ticket-card"" style=""margin-top: 3px;"">
                        <div class=""card-body"">
                            <div class=""row"">
                                <div class=""col-12"">
                                    <div class=""form-group d-flex align-items-center"">
                                        <span class=""material-symbols-outlined card-icon"">
                                            order_approve
                                        </span>
                                        <h3 class=""card-title ml-2"">BUSCAR TICKET</h3>
                                    </div>
                                </div>
                                <div class=""col-12"">
           ");
                WriteLiteral("                         <div class=\"form-group\">\r\n                                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "38759ea4693b8b520a1b873294b148c73ea56ab410840", async() => {
                    WriteLiteral(@"
                                            <div class=""input-group"">
                                                <input type=""text"" class=""form-control"" placeholder=""Ingrese número de folio""
                                                       name=""txtFolio"" id=""txtFolio"" maxlength=""10""
                                                       inputmode=""numeric"" oninput=""validarSoloNumeros(this)"" required />
                                                <div class=""input-group-append d-none d-md-flex"">
                                                    <button type=""submit"" class=""btn btn-icon"" id=""btnBuscarTicket"" title=""Buscar ticket"">
                                                        <span class=""material-symbols-outlined"">
                                                            search
                                                        </span>
                                                    </button>
                                                    <button type=""b");
                    WriteLiteral(@"utton"" class=""btn btn-icon"" id=""btnLimpiar"" title=""Limpiar búsqueda"">
                                                        <span class=""material-symbols-outlined"">
                                                            backspace
                                                        </span>
                                                    </button>
                                                </div>
                                            </div>
                                            <div class=""d-flex d-md-none justify-content-between mt-2"">
                                                <button type=""submit"" class=""btn btn-primary w-50 mr-2"" id=""btnBuscarTicketMobile"">
                                                    Buscar
                                                </button>
                                                <button type=""button"" class=""btn btn-secondary w-50"" id=""btnLimpiarMobile"">
                                                    Limpiar
     ");
                    WriteLiteral("                                           </button>\r\n                                            </div>\r\n                                        ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>


                    <!---->
                    <div class=""card infopedido-card"" style=""margin-top: 3px; display: none;"" id=""pedidoInfo"">
                        <div class=""card-body"">
                            <div class=""row"">
                                <div class=""col-12"">
                                    <div class=""form-group d-flex align-items-center"">
                                        <h3 class=""card-title"">INFORMACIÓN DEL PEDIDO</h3>
                                    </div>
                                </div>

                                <div class=""col-12"">
                                    <div class=""form-group d-flex flex-column align-items-start justify-content-end"">
                                        <p><strong>Folio:</strong> <span id=""folio""></span></p>
           ");
                WriteLiteral(@"                             <p><strong>Fecha:</strong> <span id=""fecha""></span></p>
                                        <p><strong>Cajero:</strong> <span id=""cajero""></span></p>
                                        <p><strong>Cliente:</strong> <span id=""cliente""></span></p>
                                        <p><strong>Total:</strong> <span id=""total""></span></p>
                                        <p><strong>Pago:</strong> <span id=""pago""></span></p>
                                        <p><strong>Cambio:</strong> <span id=""cambio""></span></p>
                                        <button class=""btn btn-block w-100 mt-2"" style=""background-color: #e86217; color: #ffffff; "" id=""btnPasarProduccion"" onclick=""ingresaTicket()"">
                                            <i class=""fas fa-share"" style=""margin-right: 6px; vertical-align: middle;""></i> Pasar a producción
                                        </button>
                                    </div>
                       ");
                WriteLiteral(@"         </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class=""col-sm-8 col-md-6 col-lg-7 flex-grow-1"">
                    <!--DIV DERECHA-->
                    <div class=""card pedidos-card"" style=""margin-top: 3px"">
                        <div class=""card-body"">
                            <div class=""row"">
                                <div class=""col-12 cpedidos"">
                                    <div class=""form-group d-flex justify-content-center align-items-center"">
                                        <span class=""material-symbols-outlined card-icon"">package_2</span>
                                        <h3 class=""card-title ml-2"">PEDIDOS</h3>
                                    </div>
                                </div>
                                <div class=""col-12  oculto"">
                                    <div class=""form-group order-category category-1"">
    ");
                WriteLiteral(@"                                    <div class=""order-header"">
                                            <span class=""material-symbols-outlined order-icon"">arrow_drop_down_circle</span>
                                            <h3>En Producción</h3>
                                        </div>
                                        <div class=""card-container"" id=""production-orders"">
                                            <!-- Listado de pedidos en producción -->
                                        </div>
                                    </div>
                                </div>
                                <div class=""col-12 oculto"">
                                    <div class=""form-group order-category category-2"">
                                        <div class=""order-header"">
                                            <span class=""material-symbols-outlined order-icon"">arrow_drop_down_circle</span>
                                            <h3>Completado</h3>");
                WriteLiteral(@"
                                        </div>
                                        <div class=""card-container"" id=""completed-orders"">
                                            <!-- Listado de pedidos completados -->
                                        </div>
                                    </div>
                                </div>
                                <div class=""col-12 oculto"">
                                    <div class=""form-group order-category category-3"">
                                        <div class=""order-header"">
                                            <span class=""material-symbols-outlined order-icon"">arrow_drop_down_circle</span>
                                            <h3>Envío por Mensajería</h3>
                                        </div>
                                        <div class=""card-container"" id=""courier-orders"">
                                            <!-- Listado de pedidos enviados por mensajería -->
            ");
                WriteLiteral(@"                            </div>
                                    </div>
                                </div>
                                <div class=""col-12 oculto"">
                                    <div class=""form-group order-category category-4"">
                                        <div class=""order-header"">
                                            <span class=""material-symbols-outlined order-icon"">arrow_drop_down_circle</span>
                                            <h3>Envío por Paquetería</h3>
                                        </div>
                                        <div class=""card-container"" id=""parcel-orders"">
                                            <!-- Listado de pedidos enviados por paquetería -->
                                        </div>
                                    </div>
                                </div>
                                <div class=""col-12 oculto"">
                                    <div class=""form-group ");
                WriteLiteral(@"order-category category-5"">
                                        <div class=""order-header"">
                                            <span class=""material-symbols-outlined order-icon"">arrow_drop_down_circle</span>
                                            <h3>Devuelto</h3>
                                        </div>
                                        <div class=""card-container"" id=""returned-orders"">
                                            <!-- Listado de pedidos devueltos -->
                                        </div>
                                    </div>
                                </div>
                                <div class=""col-12 oculto"">
                                    <div class=""form-group order-category category-1"">
                                        <div class=""order-header"">
                                            <span class=""material-symbols-outlined order-icon"">arrow_drop_down_circle</span>
                                         ");
                WriteLiteral(@"   <h3>Reprogramado</h3>
                                        </div>
                                        <div class=""card-container"" id=""rescheduled-orders"">
                                            <!-- Listado de pedidos Reprogramado -->
                                        </div>
                                    </div>
                                </div>
                                <div class=""col-12 oculto"">
                                    <div class=""form-group order-category category-2"">
                                        <div class=""order-header"">
                                            <span class=""material-symbols-outlined order-icon"">arrow_drop_down_circle</span>
                                            <h3>Recoge en oficina</h3>
                                        </div>
                                        <div class=""card-container"" id=""pickup-orders"">
                                            <!-- Listado de pedidos Recoge en oficina ");
                WriteLiteral(@"-->
                                        </div>
                                    </div>
                                </div>
                                <div class=""col-12 oculto"">
                                    <div class=""form-group order-category category-6"">
                                        <div class=""order-header"">
                                            <span class=""material-symbols-outlined order-icon"">arrow_drop_down_circle</span>
                                            <h3>Anulado</h3>
                                        </div>
                                        <div class=""card-container"" id=""canceled-orders"">
                                            <!-- Listado de pedidos anulados -->
                                        </div>
                                    </div>
                                </div>
                                <div class=""col-12 oculto"">
                                    <div class=""form-group order-cat");
                WriteLiteral(@"egory category-7"">
                                        <div class=""order-header"">
                                            <span class=""material-symbols-outlined order-icon"">arrow_drop_down_circle</span>
                                            <h3>Entregado</h3>
                                        </div>
                                        <div class=""card-container"" id=""delivered-orders"">
                                            <!-- Listado de pedidos entregados -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Modal -->
        <div id=""order-modal"" class=""modal fade"" tabindex=""-1"" aria-labelledby=""orderModalLabel"" aria-hidden=""true"">
            <div class=""modal-dialog modal-dialog-centered"" role=""document"">
            ");
                WriteLiteral(@"    <div class=""modal-content"">
                    <!--Modal header-->
                    <div class=""modal-header"">
                        <div class=""col-12"">
                            <div class=""form-group d-flex align-items-center mt-2 mb-2"">
                                <span class=""material-symbols-outlined card-icon"">
                                    receipt
                                </span>
                                <h5 class=""modal-title"" id=""orderModalLabel"">DETALLE DEL PEDIDO</h5>
                                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                                    <span aria-hidden=""true"">&times;</span>
                                </button>
                            </div>
                        </div>
                    </div>
                    <!--Modal body-->
                    <div class=""modal-body"">
                        <div id=""modal-order-details"">
                           ");
                WriteLiteral(@" <div class=""row"">
                                <div class=""col-md-12"">
                                    <label><strong>Cliente:</strong></label>
                                    <p id=""txtInfoCliente""></p>
                                </div>
                            </div>
                            <div class=""row"">
                                <div class=""col-6"">
                                    <label><strong>Folio ticket:</strong></label>
                                    <p id=""txtInfoTicket""></p>
                                </div>
                                <div class=""col-6"">
                                    <label><strong>Fecha del Pedido:</strong></label>
                                    <p id=""txtInfoFechaPedido""></p>
                                </div>
                            </div>
                            <div class=""row"">
                                <div class=""col-md-12"">
                                    <label><strong>C");
                WriteLiteral(@"ajero:</strong></label>
                                    <p id=""txtInfoCajero""></p>
                                </div>
                            </div>
                            <div class=""row"">
                                <div class=""col-4"">
                                    <label><strong>Total:</strong></label>
                                    <p id=""txtInfoTotalPedido""></p>
                                </div>
                                <div class=""col-4"">
                                    <label><strong>Pago:</strong></label>
                                    <p id=""txtInfoPagoPedido""></p>
                                </div>
                                <div class=""col-4"">
                                    <label><strong>Cambio:</strong></label>
                                    <p id=""txtInfoCambioPedido""></p>
                                </div>
                            </div>
                            <hr class=""custom-hr"">
          ");
                WriteLiteral(@"                  <div class=""row"">
                                <div class=""col-12"">
                                    <label><strong>Estado actual: </strong></label>
                                    <p id=""txtInfoEstadoActual""></p>
                                </div>
                            </div>
                            <div class=""row"">
                                <div class=""col-6"">
                                    <label><strong>Fecha estado:</strong></label>
                                    <p id=""txtInfoEstadoFecha""></p>
                                </div>
                                <div class=""col-6"">
                                    <label><strong>A cargo de:</strong></label>
                                    <p id=""txtInfoEstadoUsuario""></p>
                                </div>
                            </div>
                            <hr class=""custom-hr"">
                            <div class=""row oculto"" id=""cambiosPedido"">
    ");
                WriteLiteral(@"                            <div class=""col-12"">
                                    <label><strong>Cambiar estado del pedido: </strong></label>
                                </div>
                                <div class=""col-12"">
                                    <label><strong>Observaciones:</strong></label>
                                    <textarea class=""form-control"" id=""txtInfoObservaciones""></textarea>
                                </div>
                                <div id=""status-change-options"" class=""d-flex flex-row gap-2"">

                                </div>
                            </div>

                            <!--Selección de Piloto-->
                            <div class=""row"">
                                <div class=""col-md-12"">
                                    <div id=""pilot-selection"" style=""display: none;"">
                                        <label><strong>Asignar piloto:</strong></label>
                                        <");
                WriteLiteral(@"select id=""pilot-select"" class=""form-control mb-2"">
                                            // Opciones de pilotos
                                        </select>
                                        <button id=""assign-pilot-btn"" class=""btn btn-primary btn-block"" style=""display: none;"">Cambiar estado</button>
                                    </div>
                                </div>
                            </div>

                            <!--Selección de Paquetería-->
                            <div class=""row"">
                                <div class=""col-md-12"">
                                    <div id=""parcel-selection"" style=""display: none;"">
                                        <label><strong>Asignar paquetería:</strong></label>
                                        <select id=""parcel-select"" class=""form-control mb-2"">
                                            <!--Opciones de paquetería-->
                                        </select>
            ");
                WriteLiteral(@"                            <button id=""assign-parcel-btn"" class=""btn btn-primary btn-block"" style=""display: none;"">Cambiar estado</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n\r\n\r\n\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"">
        let parametros = """";
        let usuarioLogin = """";
        let pilotosActivos = [];
        let modalInstance;
        const categoryMap = {
            ""En producción"": ""production"",
            ""Envío por Mensajería"": ""courier"",
            ""Envío por Paquetería"": ""parcel"",
            ""Entregado"": ""delivered"",
            ""Devuelto"": ""returned"",
            ""Anulado"": ""canceled"",
            ""Completado"": ""completed"",
            ""Recoge en oficina"": ""pickup"",
            ""Reprogramar"": ""rescheduled""
        };

        $(document).ready(function () {
            console.log(""READY :D"");
            consultaPedidos();
        });

        //Consulta folio en firebird
        function buscarTicket() {
            $('#pedidoInfo').hide();
            let nofolio = $('#txtFolio').val();
            document.getElementById('contenedor-loader').style.display = 'flex';
            $.ajax({
                    url: '");
#nullable restore
#line 363 "C:\Users\gabi_\OneDrive\Documentos\PORTAL\PortalServiciosMC\ServiciosMC\Views\Principal\Index.cshtml"
                     Write(Url.Action("ObtenerPedido", "Principal"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                    type: ""POST"",
                    data: { folio: nofolio },
                    success: function (data) {
                        console.log(""Obtener pedido: "");
                        console.log(data);
                        if (data.existeError) {
                            dialogoEG({
                                type: ""error"",
                                title: ""Error al buscar ticket"",
                                mensaje: ""Ocurrió un error al consultar a la base de datos. Intente de nuevo, si el inconveniente persiste contacte al administrador."",
                                confirmar: ""Aceptar"",
                                img: ""img/error.png""
                            });
                        } else {
                            if (data.existenDatos) {
                                let fechaF = formatoFecha(data.infoPedido.fecha);
                                let total = parseFloat(data.infoPedido.total).toFixed(2);
           ");
                WriteLiteral(@"                     let pago = parseFloat(data.infoPedido.pago).toFixed(2);
                                let cambio = parseFloat(data.infoPedido.cambio).toFixed(2);
                                // Mostrar la información del pedido
                                $('#folio').text(data.infoPedido.folio);
                                $('#fecha').text(fechaF);
                                $('#cajero').text(data.infoPedido.cajero);
                                $('#cliente').text(data.infoPedido.cliente);
                                $('#total').text(""Q."" + total);
                                $('#pago').text(""Q."" + pago);
                                $('#cambio').text(""Q."" + cambio);
                                $('#estatus').text(data.infoPedido.estatus);
                                parametros = {
                                    infoPedido: {
                                        folio: data.infoPedido.folio,
                                        fecha: data.i");
                WriteLiteral(@"nfoPedido.fecha,
                                        cajero: data.infoPedido.cajero,
                                        cliente: data.infoPedido.cliente,
                                        total: data.infoPedido.total,
                                        pago: data.infoPedido.pago,
                                        cambio: data.infoPedido.cambio,
                                        estatus: data.infoPedido.estatus
                                    },
                                    usuario: """"
                                };
                                // Mostrar el contenedor con la información del pedido
                                $('#pedidoInfo').show();
                            } else {
                                dialogoEG({
                                    type: ""warning"",
                                    title: ""Folio Incorrecto"",
                                    mensaje: ""No existe ningún pedido con el número de folio ingres");
                WriteLiteral(@"ado. Favor verificarlo e intentar de nuevo."",
                                    confirmar: ""Aceptar"",
                                    img: ""img/warning.png""
                                });
                                limpiar();
                            }
                        }
                        document.getElementById('contenedor-loader').style.display = 'none';
                    },
                    error: function (xhr, status, error) {
                        document.getElementById('contenedor-loader').style.display = 'none';
                    }
                });
        }

        //Insertar un ticket
        function ingresaTicket() {
            console.log("">>>> Los parametros son: "");
            console.log(parametros);
            document.getElementById('contenedor-loader').style.display = 'flex';
            $.ajax({
                url: '");
#nullable restore
#line 432 "C:\Users\gabi_\OneDrive\Documentos\PORTAL\PortalServiciosMC\ServiciosMC\Views\Principal\Index.cshtml"
                 Write(Url.Action("IngresarProduccion", "Principal"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                type: ""POST"",
                data: parametros,
                success: function (data) {
                    console.log(data);
                    if (!data.success) {
                        console.log(data.errorMensaje)
                        dialogoEG({
                            type: ""error"",
                            title: ""Error ingreso a producción"",
                            mensaje: data.errorMensaje,
                            confirmar: ""Aceptar"",
                            img: ""img/error.png""
                        })
                            limpiar();

                    } else {
                        dialogoEG({
                            type: ""success"",
                            title: ""Ingreso exitoso"",
                            mensaje: data.respuesta,
                            confirmar: ""Aceptar"",
                            img: ""img/success.png""
                        }).then(() => {
                            lim");
                WriteLiteral(@"piar();
                            consultaPedidos();
                        });
                        $('#pedidoInfo').hide();
                    }
                    document.getElementById('contenedor-loader').style.display = 'none';
                },
                error: function (xhr, status, error) {
                    document.getElementById('contenedor-loader').style.display = 'none';
                    console.log(""Error al ingresar el ticket a producción:"", error);
                    dialogoEG({
                        type: ""error"",
                        title: ""Error de comunicación"",
                        mensaje: ""Ocurrió un error al ingresar el ticket a producción. Intente nuevamente, si el inconveniente persiste contacte al administrador."",
                        confirmar: ""Aceptar"",
                        img: ""img/error.png""
                    })
                        limpiar();
                }
            });
        }

        //Consulta de ped");
                WriteLiteral("idos\r\n        function consultaPedidos() {\r\n            console.log(\"consultaPedidos...\");\r\n            document.getElementById(\'contenedor-loader\').style.display = \'flex\';\r\n             $.ajax({\r\n            url: \'");
#nullable restore
#line 483 "C:\Users\gabi_\OneDrive\Documentos\PORTAL\PortalServiciosMC\ServiciosMC\Views\Principal\Index.cshtml"
             Write(Url.Action("ListaPedidos", "Principal"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
            type: ""POST"",
            success: function (data) {
                if (!data.success) {
                    console.log(data.errorMensaje)
                    dialogoEG({
                        type: ""error"",
                        title: ""Error consulta de pedidos"",
                        mensaje: data.errorMensaje,
                        confirmar: ""Aceptar"",
                        img: ""img/error.png""
                    }).then(() => {
                        limpiar();
                    });
                } else {
                    const pedidos = JSON.parse(data.respuesta).listadoPedidos;
                    console.log(""pedidos:"");
                    console.log(pedidos);
                    //Actualizar listado de pedidos
                    updateList(pedidos);
                }
                document.getElementById('contenedor-loader').style.display = 'none';
            },
            error: function (xhr, status, error) {
                docume");
                WriteLiteral(@"nt.getElementById('contenedor-loader').style.display = 'none';
                console.log(""Error al consultar pedidos:"", error);
                dialogoEG({
                    type: ""error"",
                    title: ""Error de comunicación"",
                    mensaje: ""Ocurrió un error al obtener el listado de pedidos. Intente nuevamente, si el inconveniente persiste contacte al administrador."",
                    confirmar: ""Aceptar"",
                    img: ""img/error.png""
                });
            }
        });
        }

        //Obtener pilotos activos
        function getPilotosAct() {
            $.ajax({
                    url: '");
#nullable restore
#line 523 "C:\Users\gabi_\OneDrive\Documentos\PORTAL\PortalServiciosMC\ServiciosMC\Views\Principal\Index.cshtml"
                     Write(Url.Action("ListaPilotos", "Principal"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                    type: ""POST"",
                     success: function (data) {
                         if (!data.success) {
                             console.log(data.errorMensaje);
                         } else {
                             // Deserializar la respuesta JSON
                             let respuesta = JSON.parse(data.respuesta);

                             // Acceder al array de pilotos
                             let listadoPilotos = respuesta.listadoPilotos;

                             // Obtener el elemento select
                             let pilotSelect = $('#pilot-select');
                             // Vaciar las opciones existentes
                             pilotSelect.empty();
                             // Agregar la opción predeterminada
                             pilotSelect.append('<option value="""">Selecciona un piloto</option>');

                             // Agregar los pilotos al select
                             listadoPi");
                WriteLiteral(@"lotos.forEach(piloto => {
                                 pilotSelect.append(`<option value=""${piloto.id_usuario}"">${piloto.nombre}</option>`);
                             });
                         }
                     },
                     error: function (xhr, status, error) {
                         document.getElementById('contenedor-loader').style.display = 'none';
                         console.log(""Error al consultar pilotos:"", error);
                         dialogoEG({
                             type: ""error"",
                             title: ""Error de comunicación"",
                             mensaje: ""Ocurrió un error al obtener listado de pilotos. Intente nuevamente, si el inconveniente persiste contacte al administrador."",
                             confirmar: ""Aceptar"",
                             img: ""img/error.png""
                         });
                     }
            });
        }

        //Consulta todos los pilotos del sistema
        f");
                WriteLiteral("unction getPilotosAll() {\r\n            document.getElementById(\'contenedor-loader\').style.display = \'flex\';\r\n            $.ajax({\r\n                    url: \'");
#nullable restore
#line 566 "C:\Users\gabi_\OneDrive\Documentos\PORTAL\PortalServiciosMC\ServiciosMC\Views\Principal\Index.cshtml"
                     Write(Url.Action("ConsultaPilotos", "Principal"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                    type: ""POST"",
                     success: function (data) {
                         if (!data.success) {
                             console.log(data.errorMensaje);
                         } else {
                             // Deserializar la respuesta JSON
                             let respuesta = JSON.parse(data.respuesta);

                             // Acceder al array de pilotos
                             let listadoPilotos = respuesta.listadoPilotos;
                             listadoPilotos.forEach(piloto => {
                                 console.log(""ID Piloto: "" + piloto.id_usuario);
                                 console.log(""Nombre: "" + piloto.nombre);
                                 console.log(""Teléfono: "" + piloto.telefono);
                                 console.log(""Username: "" + piloto.username);
                                 console.log(""Activo: "" + piloto.activo);
                                 console.log(""Password: "" +");
                WriteLiteral(@" piloto.password);
                             });

                         }
                         document.getElementById('contenedor-loader').style.display = 'none';
                     },
                     error: function (xhr, status, error) {
                         document.getElementById('contenedor-loader').style.display = 'none';
                         console.log(""Error al consultar pilotos:"", error);
                         dialogoEG({
                             type: ""error"",
                             title: ""Error de comunicación"",
                             mensaje: ""Ocurrió un error al obtener listado de pilotos. Intente nuevamente, si el inconveniente persiste contacte al administrador."",
                             confirmar: ""Aceptar"",
                             img: ""img/error.png""
                         });
                     }
            });
        }

        //Consulta empresas de paquetería
        function getPaqueterias() {
         ");
                WriteLiteral("   document.getElementById(\'contenedor-loader\').style.display = \'flex\';\r\n            $.ajax({\r\n                    url: \'");
#nullable restore
#line 607 "C:\Users\gabi_\OneDrive\Documentos\PORTAL\PortalServiciosMC\ServiciosMC\Views\Principal\Index.cshtml"
                     Write(Url.Action("ConsultaPaqueterias", "Principal"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                    type: ""POST"",
                     success: function (data) {
                         if (!data.success) {
                             console.log(data.errorMensaje);
                         } else {
                             // Deserializar la respuesta JSON
                             let respuesta = JSON.parse(data.respuesta);

                             // Acceder al array de paqueterías
                             let listadoPaqueterias = respuesta.listadoPaqueterias;

                             // Obtener el elemento select
                             let parcelSelect = $('#parcel-select');
                             // Vaciar las opciones existentes
                             parcelSelect.empty();
                             // Agregar la opción predeterminada
                             parcelSelect.append('<option value="""">Selecciona una paquetería</option>');

                             // Agregar las paqueterías al select
             ");
                WriteLiteral(@"                listadoPaqueterias.forEach(paq => {
                                 parcelSelect.append(`<option value=""${paq.id_paqueteria}"">${paq.nombre}</option>`);
                             });
                         }
                         document.getElementById('contenedor-loader').style.display = 'none';
                     },
                     error: function (xhr, status, error) {
                         document.getElementById('contenedor-loader').style.display = 'none';
                         console.log(""Error al consultar pilotos:"", error);
                         dialogoEG({
                             type: ""error"",
                             title: ""Error de comunicación"",
                             mensaje: ""Ocurrió un error al obtener listado de pilotos. Intente nuevamente, si el inconveniente persiste contacte al administrador."",
                             confirmar: ""Aceptar"",
                             img: ""img/error.png""
                        ");
                WriteLiteral(@" });
                     }
            });
        }

        //Actualizar lista de pedidos
        function updateList(listaPedidos) {
            // Crear un objeto para almacenar el último estado de cada pedido
            const pedidosUltimoEstado = {};
            // Iterar sobre la lista de pedidos para encontrar el último estado de cada folio
            listaPedidos.forEach(pedido => {
                const folio = pedido.folio;
                // Si el folio no está en el objeto o si el estado actual es más reciente
                if (!pedidosUltimoEstado[folio] || new Date(pedido.fecha_estado) > new Date(pedidosUltimoEstado[folio].fecha_estado)) {
                    pedidosUltimoEstado[folio] = pedido;
                }
            });
            // Obtener los valores de los pedidos con el último estado
            const pedidosConUltimoEstado = Object.values(pedidosUltimoEstado);
            console.log(""pedidosConUltimoEstado: "");
            console.log(pedidosConUltimoEs");
                WriteLiteral(@"tado);
            // Limpiar listas existentes
            const categories = ['production', 'courier', 'parcel', 'delivered', 'returned', 'canceled', 'completed', 'rescheduled', 'pickup'];
            categories.forEach(category => {
                const contenedorPedidos = document.getElementById(`${category}-orders`); // Cambia este id según tu categoría
                contenedorPedidos.innerHTML = ''; // Limpiar la lista existente

                // Filtrar los pedidos por categoría utilizando el mapeo
                const pedidosFiltrados = pedidosConUltimoEstado.filter(pedido => categoryMap[pedido.estado_actual] === category);

                pedidosFiltrados.forEach(pedido => {

                    // Crear un contenedor
                    const cardItem = document.createElement('div');
                    cardItem.classList.add('card-item');

                    // Crear elementos para cada parte del contenido
                    const cliente = document.createElement('div');
");
                WriteLiteral(@"                    cliente.textContent = pedido.cliente;
                    cliente.classList.add('cliente');

                    const folio = document.createElement('div');
                    folio.textContent = `Folio ticket #${pedido.folio}`;
                    folio.classList.add('detalle');

                    const total = document.createElement('div');
                    total.textContent = `Total Q.${pedido.total}`;
                    total.classList.add('detalle');

                    const fecha = document.createElement('div');
                    fecha.textContent = pedido.fecha_estado;
                    fecha.classList.add('detalle');

                    // Agregar todos los elementos creados al div card-item
                    cardItem.appendChild(cliente);
                    cardItem.appendChild(folio);
                    cardItem.appendChild(total);
                    cardItem.appendChild(fecha);

                    // Agregar el evento click para el modal");
                WriteLiteral(@"
                    cardItem.addEventListener('click', function () {
                        showModal(pedido, cardItem);
                    });
                    // Agregar el card-item al contenedor correspondiente
                    contenedorPedidos.appendChild(cardItem);
                });

                //const contenedorProduccion = document.querySelector(`#${category}-orders`).closest('.col-12');

                //if (contenedorProduccion.classList.contains('oculto')) {
                //    contenedorProduccion.classList.remove('oculto');
                //}
                // Verificar si hay elementos en el contenedor
                const contenedorProduccion = contenedorPedidos.closest('.col-12');
                if (pedidosFiltrados.length > 0) {
                    // Si hay elementos, mostrar el contenedor
                    contenedorProduccion.classList.remove('oculto');
                } else {
                    // Si no hay elementos, ocultar el contenedor
 ");
                WriteLiteral(@"                   contenedorProduccion.classList.add('oculto');
                }
            });
        }

        //Mostral modal
        function showModal(pedido, cardItem) {
            console.log(""Abro diálogo del pedido: "");
            console.log(pedido);
            let piloto = null;
            let paqueteria = null;
            let obvs = null;
            //Aginación de colores
            // Obtener la categoría del card-item clickeado
            const categoryContainer = cardItem.closest('.order-category');
            let categoryClass = '';
            if (categoryContainer) {
                categoryClass = Array.from(categoryContainer.classList).find(cls => cls.startsWith('category-'));
                console.log(""Clase de categoría: "", categoryClass);
            }
            const orderNumber = pedido.folio;
            const currentState = pedido.estado_actual;
            // Mostrar detalles del pedido en el modal
            //document.getElementById('moda");
                WriteLiteral(@"l-order-details').textContent = `Detalles del pedido - Folio: #${orderNumber} Cliente: ${pedido.cliente}  Estado Actual: ${currentState}`;
            $('#txtInfoCliente').text(`${pedido.cliente}`);
            $('#txtInfoTicket').text(`#${orderNumber}`);
            $('#txtInfoFechaPedido').text(`${formatoFecha(pedido.fecha)}`);
            $('#txtInfoCajero').text(`${pedido.cajero}`);
            $('#txtInfoTotalPedido').text(`Q.${pedido.total}`);
            $('#txtInfoPagoPedido').text(`Q.${pedido.pago}`);
            $('#txtInfoCambioPedido').text(`Q.${pedido.cambio}`);
            $('#txtInfoEstadoActual').text(`${currentState}`);
            $('#txtInfoEstadoFecha').text(`${formatoFechaDos(pedido.fecha_estado)}`);
            $('#txtInfoEstadoUsuario').text(`${pedido.usuario_registro}`);
            //$('#txtInfoDetallesEstadoActual').text(`${pedido.observaciones}`);
            const cambiosPedidos = document.getElementById('cambiosPedido');
            const statusChangeOptions = documen");
                WriteLiteral(@"t.getElementById('status-change-options');
            const pilotSelection = document.getElementById('pilot-selection');
            const assignPilotBtn = document.getElementById('assign-pilot-btn');
            const parcelSelection = document.getElementById('parcel-selection');
            const assignParcelBtn = document.getElementById('assign-parcel-btn');
            /*const detallePedido = document.getElementById('divDetallesEstado');*/
            // Resetear las opciones del modal
            statusChangeOptions.innerHTML = '';
            pilotSelection.style.display = 'none';
            assignPilotBtn.style.display = 'none';
            parcelSelection.style.display = 'none';
            assignParcelBtn.style.display = 'none';
            // Obtener los posibles siguientes estados
            const nextStates = getNextStates(currentState);
            console.log(""Posibles siguientes estados [nextStates] "");
            console.log(nextStates);
            if (nextStates && nextSt");
                WriteLiteral(@"ates.length > 0) {
                cambiosPedidos.classList.remove('oculto');  // Mostrar el div si hay estados
            } else {
                cambiosPedidos.classList.add('oculto');  // Ocultar el div si no hay estados
            }
                //if (pedido.observaciones) {
                //    detallePedido.show();
                //} else {
                //    detallePedido.show();
                //}
            nextStates.forEach(nextState => {
                const button = document.createElement('button');
                button.textContent = nextState.label;
                button.classList.add('btn', 'btn-primary', 'me-2');
                button.addEventListener('click', function () {
                    if (nextState.state === 'courier') { // Enviar por Mensajería
                        getPilotosAct();
                        pilotSelection.style.display = 'block';
                        assignPilotBtn.style.display = 'block';
                        assignParcelB");
                WriteLiteral(@"tn.style.display = 'none';
                        parcelSelection.style.display = 'none';

                        assignPilotBtn.addEventListener('click', function () {
                            const selectedPilot = document.getElementById('pilot-select').value;
                            obvs = document.getElementById('txtInfoObservaciones').value;
                            if (selectedPilot) {
                                console.log('Piloto asignado: ' + selectedPilot);
                                piloto = selectedPilot;
                                changeOrderState(pedido, nextState.state, piloto, paqueteria, obvs);
                            } else {
                                alert('Por favor, selecciona un piloto.');
                            }
                        });

                    } else if (nextState.state === 'parcel') { // Enviar por Paquetería
                        getPaqueterias();
                        parcelSelection.style.display = 'blo");
                WriteLiteral(@"ck';
                        assignParcelBtn.style.display = 'block';
                        assignPilotBtn.style.display = 'none';
                        pilotSelection.style.display = 'none';

                        assignParcelBtn.addEventListener('click', function () {
                            const selectedParcel = document.getElementById('parcel-select').value;
                            obvs = document.getElementById('txtInfoObservaciones').value;
                            if (selectedParcel) {
                                paqueteria = selectedParcel;
                                console.log('Paquetería asignada: ' + selectedParcel);
                                changeOrderState(pedido, nextState.state, piloto, paqueteria, obvs);
                            } else {
                                alert('Por favor, selecciona una empresa de paquetería.');
                            }
                        });

                    } else {
                        c");
                WriteLiteral(@"onsole.log(""dentro de else"");
                        obvs = document.getElementById('txtInfoObservaciones').value;
                        changeOrderState(pedido, nextState.state, piloto, paqueteria, obvs);
                    }
                });
                statusChangeOptions.appendChild(button);
            });
            // Utilizar Bootstrap para mostrar el modal
            //const modalElement = document.getElementById('order-modal');
            //modalElement.classList.add(categoryClass);
            //modalInstance = new bootstrap.Modal(modalElement);
            //modalInstance.show();
            // Mostrar el modal y agregar la clase de categoría si existe
            const modalElement = document.getElementById('order-modal');
            // Remover cualquier clase de categoría existente para evitar múltiples clases
            modalElement.classList.remove(...Array.from(modalElement.classList).filter(cls => cls.startsWith('category-')));

            // Agregar la clas");
                WriteLiteral(@"e de categoría si existe
            if (categoryClass) {
                modalElement.classList.add(categoryClass);
            }
            // Mostrar el modal utilizando Bootstrap
            modalInstance = new bootstrap.Modal(modalElement);
            modalInstance.show();
        }

        //Obtener estados siguientes posibles
        function getNextStates(currentState) {
            console.log(""Dentro de getNextStates: "" + currentState);
            const stateTransitions = {
                production: [
                    { state: 'completed', label: 'Completado' },
                    { state: 'canceled', label: 'Anulado' }
                ],
                completed: [
                    { state: 'courier', label: 'Enviar por Mensajería' },
                    { state: 'parcel', label: 'Enviar por Paquetería' },
                    { state: 'pickup', label: 'Recoge en oficina' },
                    { state: 'canceled', label: 'Anulado' }
                ],
          ");
                WriteLiteral(@"      courier: [
                    { state: 'returned', label: 'Devuelto' },
                    { state: 'delivered', label: 'Entregado' }
                ],
                parcel: [
                    { state: 'returned', label: 'Devuelto' },
                    { state: 'delivered', label: 'Entregado' }
                ],
                delivered: [],
                returned: [
                    { state: 'canceled', label: 'Anulado' },
                    { state: 'rescheduled', label: 'Reprogramar' }
                ],
                canceled: [],
                pickup: [
                    { state: 'delivered', label: 'Entregado' },
                    { state: 'canceled', label: 'Anulado' }
                ],
                rescheduled: [
                    { state: 'courier', label: 'Enviar por Mensajería' },
                    { state: 'parcel', label: 'Enviar por Paquetería' },
                    { state: 'pickup', label: 'Recoge en oficina' },
                   ");
                WriteLiteral(@" { state: 'canceled', label: 'Anulado' }
                ]
            };
            // Usar el mapeo para convertir currentState a su correspondiente en inglés
            const mappedState = categoryMap[currentState];
            return stateTransitions[mappedState] || [];
        }

        // Mapa de conversión de inglés a español
        const entospa = {
            ""production"": ""En producción"",
            ""courier"": ""Envío por Mensajería"",
            ""parcel"": ""Envío por Paquetería"",
            ""delivered"": ""Entregado"",
            ""returned"": ""Devuelto"",
            ""canceled"": ""Anulado"",
            ""completed"": ""Completado"",
            ""pickup"": ""Recoge en oficina"",
            ""rescheduled"": ""Reprogramar""

        };

        // Función para obtener el equivalente en español dado un estado en inglés
        function getState(state) {
            return entospa[state] || ""Estado desconocido"";
        }

        //Cambiar estado del pedido
        function changeOrde");
                WriteLiteral(@"rState(pedido, newState, piloto, paqueteria, obvs) {
            console.log(""changeOrderState ----> "");
            console.log(""observaciones .... "" + obvs);
            console.log(""   pedido: "");
            console.log(pedido);
            newState = getState(newState);
            let parametros = {
                'folio': pedido.folio,
                'estadoAnterior': pedido.estado_actual,
                'estadoNuevo': newState,
                'usuario': """",
                'idMensajero': piloto,
                'idPaqueteria': paqueteria,
                'observaciones': obvs
            };
            console.log(""   parametros:"");
            console.log(parametros);
            if (pedido.estado_actual && pedido.estado_actual !== newState) {
                $.ajax({
                    url: '");
#nullable restore
#line 936 "C:\Users\gabi_\OneDrive\Documentos\PORTAL\PortalServiciosMC\ServiciosMC\Views\Principal\Index.cshtml"
                     Write(Url.Action("cambioEstadoPedido", "Home"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                    type: ""POST"",
                    data: parametros,
                    success: function (data) {
                        console.log(data);
                        if (!data.success) {
                            console.log(data.errorMensaje)
                            dialogoEG({
                                type: ""error"",
                                title: ""Error cambio de estado"",
                                mensaje: data.errorMensaje,
                                confirmar: ""Aceptar"",
                                img: ""img/error.png""
                            }).then(() => {
                                //limpiar();
                            });
                        } else {
                            dialogoEG({
                                type: ""success"",
                                title: ""Cambio de estado exitoso"",
                                mensaje: data.respuesta,
                                confirmar: ""Acep");
                WriteLiteral(@"tar"",
                                img: ""img/success.png""
                            }).then(() => {
                                modalInstance.hide(); // Cerrar el modal después de mostrar el diálogo de éxito

                                consultaPedidos();
                            });
                        }
                        document.getElementById('contenedor-loader').style.display = 'none';
                    },
                    error: function (xhr, status, error) {
                        document.getElementById('contenedor-loader').style.display = 'none';
                        console.log(""Error al ingresar el ticket a producción:"", error);
                        dialogoEG({
                            type: ""error"",
                            title: ""Error de comunicación"",
                            mensaje: ""Ocurrió un error al ingresar el ticket a producción. Intente nuevamente, si el inconveniente persiste contacte al administrador."",
               ");
                WriteLiteral(@"             confirmar: ""Aceptar"",
                            img: ""img/error.png""
                        });
                    }
            });

            }
        }

        //Limpiar búsqueda ticket
        function limpiar() {
            parametros = """";
            $('#txtFolio').val("""");
            $('#folio').text("""");
            $('#fecha').text("""");
            $('#cajero').text("""");
            $('#cliente').text("""");
            $('#total').text("""");
            $('#pago').text("""");
            $('#cambio').text("""");
            $('#estatus').text("""");
            $('#pedidoInfo').hide();
            // Desplazar hasta la parte superior de la página
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        //Formatear fecha 1
        function formatoFecha(fecha) {
            var date = new Date(fecha);

            // Obtener partes de la fecha
            var dia = date.getDate();
            var mes = date.getMonth() + 1; // Los me");
                WriteLiteral(@"ses son base 0
            var anio = date.getFullYear();

            // Obtener partes de la hora
            var horas = date.getHours();
            var minutos = date.getMinutes();
            var segundos = date.getSeconds();

            // Formato de 12 horas
            var amPm = horas >= 12 ? 'P.M.' : 'A.M.';
            horas = horas % 12;
            horas = horas ? horas : 12; // Si la hora es 0 (medianoche), ajustarla a 12

            // Agregar ceros iniciales si es necesario
            dia = dia < 10 ? '0' + dia : dia;
            mes = mes < 10 ? '0' + mes : mes;
            horas = horas < 10 ? '0' + horas : horas;
            minutos = minutos < 10 ? '0' + minutos : minutos;
            segundos = segundos < 10 ? '0' + segundos : segundos;

            // Formato final
            return dia + '/' + mes + '/' + anio + ' ' + horas + ':' + minutos + ':' + segundos + ' ' + amPm;
        }

        //Formatear fecha 2 
        function formatoFechaDos(fecha) {
     ");
                WriteLiteral(@"       // Separar la fecha y la hora
            var partesFechaHora = fecha.split(' ');
            var partesFecha = partesFechaHora[0].split('/');
            var partesHora = partesFechaHora[1].split(':');

            // Crear un objeto Date usando las partes de la fecha y hora
            var dia = parseInt(partesFecha[0], 10);
            var mes = parseInt(partesFecha[1], 10) - 1; // Mes es base 0 en JavaScript
            var anio = parseInt(partesFecha[2], 10);

            var horas = parseInt(partesHora[0], 10);
            var minutos = parseInt(partesHora[1], 10);
            var segundos = parseInt(partesHora[2], 10);

            // Determinar A.M. o P.M.
            var amPm = horas >= 12 ? 'P.M.' : 'A.M.';

            // Convertir a formato de 12 horas
            horas = horas % 12;
            horas = horas ? horas : 12; // Si es 0, asignar 12 (medianoche o mediodía)

            // Agregar ceros iniciales si es necesario
            dia = dia < 10 ? '0' + dia : dia;");
                WriteLiteral(@"
            mes = (mes + 1) < 10 ? '0' + (mes + 1) : (mes + 1); // Ajustar el mes de nuevo a base 1
            horas = horas < 10 ? '0' + horas : horas;
            minutos = minutos < 10 ? '0' + minutos : minutos;
            segundos = segundos < 10 ? '0' + segundos : segundos;

            // Formato final
            return dia + '/' + mes + '/' + anio + ' ' + horas + ':' + minutos + ':' + segundos + ' ' + amPm;
        }
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
